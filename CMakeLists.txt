list(APPEND CMAKE_MODULE_PATH "/home/vincent/AAA_projects/UnlimitedResearchCooperative/Myelin-Colab/OpenEphys/OpehEphysPluginGUI/OEPlugins/Latency-Measurement")

cmake_minimum_required(VERSION 3.5.0)

if (NOT DEFINED GUI_BASE_DIR)
    if (DEFINED ENV{GUI_BASE_DIR})
        set(GUI_BASE_DIR $ENV{GUI_BASE_DIR})
    else()
        set(GUI_BASE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/../../plugin-GUI)
    endif()
endif()

get_filename_component(PROJECT_FOLDER ${CMAKE_CURRENT_SOURCE_DIR} ABSOLUTE)
get_filename_component(PLUGIN_NAME ${PROJECT_FOLDER} NAME)

project(OE_PLUGIN_${PLUGIN_NAME})
set(CMAKE_SHARED_LIBRARY_PREFIX "")

if(${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
    set(LINUX 1)
    if(NOT CMAKE_BUILD_TYPE)
        set(CMAKE_BUILD_TYPE Debug)
    endif()
else()
    message(FATAL_ERROR "This plugin is only configured to be built on Linux.")
endif()

set_property(DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS
    OEPLUGIN
    JUCE_DISABLE_NATIVE_FILECHOOSERS=1
    $<$<CONFIG:Debug>:DEBUG=1>
    $<$<CONFIG:Debug>:_DEBUG=1>
    $<$<CONFIG:Release>:NDEBUG=1>
)

set(SOURCE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/Source)
file(GLOB_RECURSE SRC_FILES 
     LIST_DIRECTORIES false 
     "${SOURCE_PATH}/*.cpp" 
     "${SOURCE_PATH}/*.h"
)
list(FILTER SRC_FILES EXCLUDE REGEX ".ipynb_checkpoints")

set(GUI_COMMONLIB_DIR ${GUI_BASE_DIR}/installed_libs)

set(CONFIGURATION_FOLDER $<$<CONFIG:Debug>:Debug>$<$<NOT:$<CONFIG:Debug>>:Release>)

list(APPEND CMAKE_PREFIX_PATH ${GUI_COMMONLIB_DIR} ${GUI_COMMONLIB_DIR}/${CONFIGURATION_FOLDER})

add_library(${PLUGIN_NAME} SHARED ${SRC_FILES})

target_compile_features(${PLUGIN_NAME} PUBLIC cxx_auto_type cxx_generalized_initializers cxx_std_17)
target_include_directories(${PLUGIN_NAME} PUBLIC
    /home/vincent/AAA_projects/UnlimitedResearchCooperative/Myelin-Colab/OpenEphys/OpehEphysPluginGUI/plugin-GUI/JuceLibraryCode
    ${GUI_BASE_DIR}/JuceLibraryCode
    ${GUI_BASE_DIR}/JuceLibraryCode/modules
    ${GUI_BASE_DIR}/Plugins/Headers
    ${GUI_COMMONLIB_DIR}/include
    /home/vincent/AAA_projects/UnlimitedResearchCooperative/Myelin Colab/OpenEphys/OpehEphysPluginGUIStable/Source/Processors/Headers/
    /home/vincent/AAA_projects/UnlimitedResearchCooperative/Myelin Colab/OpenEphys/OpehEphysPluginGUIStable/plugin-GUI/Source
    /home/vincent/AAA_projects/UnlimitedResearchCooperative/Myelin Colab/OpenEphys/OpehEphysPluginGUIStable/plugin-GUI/Plugins/Headers
)

# Find ZeroMQ
find_package(ZMQ REQUIRED)
if (ZMQ_FOUND)
    include_directories(${ZMQ_INCLUDE_DIRS})
    target_link_libraries(${PLUGIN_NAME} ${ZMQ_LIBRARIES})
else()
    message(FATAL_ERROR "ZeroMQ not found. Please install ZeroMQ and/or set ZMQ_DIR.")
endif()

set(GUI_BIN_DIR ${GUI_BASE_DIR}/Build/${CONFIGURATION_FOLDER})

if (NOT CMAKE_LIBRARY_ARCHITECTURE)
    if (CMAKE_SIZEOF_VOID_P EQUAL 8)
        set(CMAKE_LIBRARY_ARCHITECTURE "x64")
    else()
        set(CMAKE_LIBRARY_ARCHITECTURE "x86")
    endif()
endif()

# Libraries and compiler options for Linux
target_link_libraries(${PLUGIN_NAME} GL X11 Xext Xinerama asound dl freetype pthread rt)
set_property(TARGET ${PLUGIN_NAME} APPEND_STRING PROPERTY LINK_FLAGS
    "-fvisibility=hidden -fPIC -rdynamic -Wl,-rpath,'$$ORIGIN/../shared'")
target_compile_options(${PLUGIN_NAME} PRIVATE -fPIC -rdynamic)
target_compile_options(${PLUGIN_NAME} PRIVATE -O3) #enable optimization for linux debug

install(TARGETS ${PLUGIN_NAME} LIBRARY DESTINATION ${GUI_BIN_DIR}/plugins)

# Create filters for VS and Xcode
foreach(src_file IN ITEMS ${SRC_FILES})
    get_filename_component(src_path "${src_file}" PATH)
    file(RELATIVE_PATH src_path_rel "${SOURCE_PATH}" "${src_path}")
    string(REPLACE "/" "\\" group_name "${src_path_rel}")
    source_group("${group_name}" FILES "${src_file}")
endforeach()

# Additional libraries, if needed
# find_package(LIBNAME)
# or
# find_library(LIBNAME_LIBRARIES NAMES libname)
# find_path(LIBNAME_INCLUDE_DIRS includefile.h)
#
# target_link_libraries(${PLUGIN_NAME} ${LIBNAME_LIBRARIES})

